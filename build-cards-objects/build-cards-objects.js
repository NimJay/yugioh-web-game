const fs = require('fs');
const csv = require('csv-parser');

const CSV_FILE_PATH = 'cards.csv';

function isBeforeYear(yyyyMmDd, year) {
    // Return false if yyyyMmDd is not a valid date
    if (!yyyyMmDd) {
        return false;
    }
    const date = new Date(yyyyMmDd);
    return date.getFullYear() < year;
}

function csvRowToCard(row) {
    return {
        id: row.id,
        name: row.name,
        description: row.desc,
        attack: parseInt(row.atk),
        defense: parseInt(row.def),
        level: parseInt(row.level),
        type: row.type, // Examples: Flip Effect Monster, Trap Card, Fusion Monster, Spell Card
        attribute: row.attribute, // Examples: WATER, DARK, EARTH
        race: row.race, // Examples: Zombie, Fiend, Machine
        archectype: row.archectype, // Examples: Elemental HERO, Umi, Gravekeeper's, Harpie
        imageUrl: row.image_url,
        treatedAs: row.treated_as,
        hasEffect: row.has_effect === '1',
    };
}

function getCards(callback) {
    const cards = [];
    fs.createReadStream(CSV_FILE_PATH)
        .pipe(csv())
        .on('data', (row) => {
            const releaseDate = row.ocg_date || row.tcg_date;
            // Synchro cards were released in 2008 ðŸ¤®
            if (isBeforeYear(releaseDate, 2008)) {
                cards.push(csvRowToCard(row));
            }
        })
        .on('end', () => {
            console.log(`Got ${cards.length} cards.`);
            if (callback) {
                callback(cards);
            }
        });
}

function buildCardObjects() {
    getCards((cards) => {
        const cardsJson = JSON.stringify(cards, null, 2);
        const cardsTs = `import { Card } from './card';

// This file was generated by build-cards-objects.js.
// Do not modify it directly.
export const cards: Card[] = ${cardsJson};`;
        fs.writeFileSync('cards.ts', cardsTs);
        console.log(`Generated cards.ts file.`);
        warnAboutInvalidities(cards);
    });
}

function warnAboutInvalidities(cards) {
  console.log(`Checking for duplicate IDs.`);
  const idsMaps = new Map();
  for (const card of cards) {
    if (idsMaps.has(card.id)) {
      console.warn(`Duplicate id: ${card.id}`);
    }
    idsMaps.set(card.id, card);
  }
}

buildCardObjects();
